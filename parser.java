
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java.io.*;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\113\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\007\000\002\004\011" +
    "\000\002\004\004\000\002\004\005\000\002\004\007\000" +
    "\002\004\011\000\002\004\007\000\002\004\007\000\002" +
    "\007\005\000\002\007\003\000\002\010\007\000\002\010" +
    "\006\000\002\010\006\000\002\010\005\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\004\000" +
    "\002\005\004\000\002\005\004\000\002\005\004\000\002" +
    "\005\004\000\002\005\004\000\002\005\004\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\004\000\002\005\005\000\002\005\006\000" +
    "\002\005\006\000\002\005\010\000\002\005\010\000\002" +
    "\005\007\000\002\005\003\000\002\005\005\000\002\005" +
    "\004\000\002\005\003\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\004\000\002\006\005\000\002\011\003\000\002\011" +
    "\005\000\002\011\005\000\002\011\007\000\002\011\006" +
    "\000\002\012\003\000\002\012\005\000\002\012\005\000" +
    "\002\012\007\000\002\012\006\000\002\012\012\000\002" +
    "\013\003\000\002\013\005\000\002\013\005\000\002\013" +
    "\007\000\002\013\006\000\002\014\005\000\002\014\003" +
    "\000\002\015\005\000\002\015\003\000\002\016\005\000" +
    "\002\016\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\252\000\052\004\017\005\020\012\012\013\022\014" +
    "\031\016\025\023\004\034\013\041\015\042\027\043\005" +
    "\044\010\045\011\046\024\047\023\050\006\051\021\052" +
    "\032\053\030\054\007\001\002\000\036\005\020\023\004" +
    "\041\015\042\027\043\005\044\010\045\011\046\024\047" +
    "\023\050\006\051\021\052\032\053\030\054\007\001\002" +
    "\000\036\005\020\023\004\041\015\042\027\043\005\044" +
    "\010\045\011\046\024\047\023\050\006\051\021\052\032" +
    "\053\030\054\007\001\002\000\052\006\uffda\007\235\010" +
    "\uffda\015\uffda\017\uffda\020\uffda\021\234\022\uffda\023\uffda" +
    "\024\uffda\025\uffda\026\236\027\uffda\030\uffda\031\uffda\032" +
    "\uffda\035\uffda\036\uffda\037\uffda\040\uffda\001\002\000\044" +
    "\006\uffd7\010\uffd7\015\uffd7\017\uffd7\020\uffd7\022\uffd7\023" +
    "\uffd7\024\uffd7\025\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7" +
    "\035\uffd7\036\uffd7\037\uffd7\040\uffd7\001\002\000\004\050" +
    "\222\001\002\000\004\050\177\001\002\000\004\005\173" +
    "\001\002\000\052\004\017\005\020\012\012\013\022\014" +
    "\031\016\025\023\004\034\013\041\015\042\027\043\005" +
    "\044\010\045\011\046\024\047\023\050\006\051\021\052" +
    "\032\053\030\054\007\001\002\000\004\002\170\001\002" +
    "\000\036\005\020\023\004\041\015\042\027\043\005\044" +
    "\010\045\011\046\024\047\023\050\006\051\021\052\032" +
    "\053\030\054\007\001\002\000\014\015\166\022\063\023" +
    "\056\024\066\025\061\001\002\000\004\005\157\001\002" +
    "\000\036\005\020\023\004\041\015\042\027\043\005\044" +
    "\010\045\011\046\024\047\023\050\006\051\021\052\032" +
    "\053\030\054\007\001\002\000\044\006\uffef\010\uffef\015" +
    "\uffef\017\uffef\020\uffef\022\uffef\023\uffef\024\uffef\025\uffef" +
    "\027\uffef\030\uffef\031\uffef\032\uffef\035\uffef\036\uffef\037" +
    "\uffef\040\uffef\001\002\000\052\004\017\005\020\012\012" +
    "\013\022\014\031\016\025\023\004\034\013\041\015\042" +
    "\027\043\005\044\010\045\011\046\024\047\023\050\006" +
    "\051\021\052\032\053\030\054\007\001\002\000\004\050" +
    "\143\001\002\000\004\050\130\001\002\000\004\005\113" +
    "\001\002\000\054\002\001\004\017\005\020\012\012\013" +
    "\022\014\031\016\025\023\004\034\013\041\015\042\027" +
    "\043\005\044\010\045\011\046\024\047\023\050\006\051" +
    "\021\052\032\053\030\054\007\001\002\000\036\005\020" +
    "\023\004\041\015\042\027\043\005\044\010\045\011\046" +
    "\024\047\023\050\006\051\021\052\032\053\030\054\007" +
    "\001\002\000\044\006\uffed\010\uffed\015\uffed\017\uffed\020" +
    "\uffed\022\uffed\023\uffed\024\uffed\025\uffed\027\uffed\030\uffed" +
    "\031\uffed\032\uffed\035\uffed\036\uffed\037\uffed\040\uffed\001" +
    "\002\000\004\005\034\001\002\000\044\006\uffee\010\uffee" +
    "\015\uffee\017\uffee\020\uffee\022\uffee\023\uffee\024\uffee\025" +
    "\uffee\027\uffee\030\uffee\031\uffee\032\uffee\035\uffee\036\uffee" +
    "\037\uffee\040\uffee\001\002\000\056\002\ufffe\004\ufffe\005" +
    "\ufffe\012\ufffe\013\ufffe\014\ufffe\016\ufffe\023\ufffe\034\ufffe" +
    "\035\ufffe\041\ufffe\042\ufffe\043\ufffe\044\ufffe\045\ufffe\046" +
    "\ufffe\047\ufffe\050\ufffe\051\ufffe\052\ufffe\053\ufffe\054\ufffe" +
    "\001\002\000\040\005\020\015\036\023\004\041\015\042" +
    "\027\043\005\044\010\045\011\046\024\047\023\050\006" +
    "\051\021\052\032\053\030\054\007\001\002\000\014\015" +
    "\105\022\063\023\056\024\066\025\061\001\002\000\040" +
    "\005\045\023\004\033\044\041\015\042\027\043\005\044" +
    "\010\045\011\046\024\047\023\050\006\051\021\052\032" +
    "\053\030\054\007\001\002\000\004\006\040\001\002\000" +
    "\052\004\017\005\020\012\012\013\022\014\031\016\025" +
    "\023\004\034\013\041\015\042\027\043\005\044\010\045" +
    "\011\046\024\047\023\050\006\051\021\052\032\053\030" +
    "\054\007\001\002\000\060\002\ufff6\004\ufff6\005\ufff6\011" +
    "\ufff6\012\ufff6\013\ufff6\014\ufff6\016\ufff6\023\ufff6\034\ufff6" +
    "\035\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6\045\ufff6\046" +
    "\ufff6\047\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6\054\ufff6" +
    "\001\002\000\026\017\062\020\067\022\063\023\056\024" +
    "\066\025\061\027\065\030\060\031\055\032\064\001\002" +
    "\000\010\015\103\036\050\037\052\001\002\000\040\005" +
    "\045\023\004\033\044\041\015\042\027\043\005\044\010" +
    "\045\011\046\024\047\023\050\006\051\021\052\032\053" +
    "\030\054\007\001\002\000\040\005\045\023\004\033\044" +
    "\041\015\042\027\043\005\044\010\045\011\046\024\047" +
    "\023\050\006\051\021\052\032\053\030\054\007\001\002" +
    "\000\030\006\057\017\062\020\067\022\063\023\056\024" +
    "\066\025\061\027\065\030\060\031\055\032\064\001\002" +
    "\000\010\006\051\036\050\037\052\001\002\000\040\005" +
    "\045\023\004\033\044\041\015\042\027\043\005\044\010" +
    "\045\011\046\024\047\023\050\006\051\021\052\032\053" +
    "\030\054\007\001\002\000\012\006\uffcd\015\uffcd\036\uffcd" +
    "\037\uffcd\001\002\000\040\005\045\023\004\033\044\041" +
    "\015\042\027\043\005\044\010\045\011\046\024\047\023" +
    "\050\006\051\021\052\032\053\030\054\007\001\002\000" +
    "\012\006\uffcf\015\uffcf\036\050\037\052\001\002\000\012" +
    "\006\uffd0\015\uffd0\036\050\037\052\001\002\000\036\005" +
    "\020\023\004\041\015\042\027\043\005\044\010\045\011" +
    "\046\024\047\023\050\006\051\021\052\032\053\030\054" +
    "\007\001\002\000\036\005\020\023\004\041\015\042\027" +
    "\043\005\044\010\045\011\046\024\047\023\050\006\051" +
    "\021\052\032\053\030\054\007\001\002\000\044\006\uffd9" +
    "\010\uffd9\015\uffd9\017\uffd9\020\uffd9\022\uffd9\023\uffd9\024" +
    "\uffd9\025\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\035\uffd9" +
    "\036\uffd9\037\uffd9\040\uffd9\001\002\000\036\005\020\023" +
    "\004\041\015\042\027\043\005\044\010\045\011\046\024" +
    "\047\023\050\006\051\021\052\032\053\030\054\007\001" +
    "\002\000\036\005\020\023\004\041\015\042\027\043\005" +
    "\044\010\045\011\046\024\047\023\050\006\051\021\052" +
    "\032\053\030\054\007\001\002\000\036\005\020\023\004" +
    "\041\015\042\027\043\005\044\010\045\011\046\024\047" +
    "\023\050\006\051\021\052\032\053\030\054\007\001\002" +
    "\000\036\005\020\023\004\041\015\042\027\043\005\044" +
    "\010\045\011\046\024\047\023\050\006\051\021\052\032" +
    "\053\030\054\007\001\002\000\036\005\020\023\004\041" +
    "\015\042\027\043\005\044\010\045\011\046\024\047\023" +
    "\050\006\051\021\052\032\053\030\054\007\001\002\000" +
    "\036\005\020\023\004\041\015\042\027\043\005\044\010" +
    "\045\011\046\024\047\023\050\006\051\021\052\032\053" +
    "\030\054\007\001\002\000\036\005\020\023\004\041\015" +
    "\042\027\043\005\044\010\045\011\046\024\047\023\050" +
    "\006\051\021\052\032\053\030\054\007\001\002\000\036" +
    "\005\020\023\004\041\015\042\027\043\005\044\010\045" +
    "\011\046\024\047\023\050\006\051\021\052\032\053\030" +
    "\054\007\001\002\000\022\006\uffd6\015\uffd6\022\063\023" +
    "\056\024\066\025\061\036\uffd6\037\uffd6\001\002\000\044" +
    "\006\uffe2\010\uffe2\015\uffe2\017\uffe2\020\uffe2\022\uffe2\023" +
    "\uffe2\024\uffe2\025\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2" +
    "\035\uffe2\036\uffe2\037\uffe2\040\uffe2\001\002\000\022\006" +
    "\uffd2\015\uffd2\022\063\023\056\024\066\025\061\036\uffd2" +
    "\037\uffd2\001\002\000\022\006\uffd1\015\uffd1\022\063\023" +
    "\056\024\066\025\061\036\uffd1\037\uffd1\001\002\000\044" +
    "\006\uffe5\010\uffe5\015\uffe5\017\uffe5\020\uffe5\022\uffe5\023" +
    "\uffe5\024\066\025\061\027\uffe5\030\uffe5\031\uffe5\032\uffe5" +
    "\035\uffe5\036\uffe5\037\uffe5\040\uffe5\001\002\000\022\006" +
    "\uffd5\015\uffd5\022\063\023\056\024\066\025\061\036\uffd5" +
    "\037\uffd5\001\002\000\044\006\uffe3\010\uffe3\015\uffe3\017" +
    "\uffe3\020\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\027\uffe3" +
    "\030\uffe3\031\uffe3\032\uffe3\035\uffe3\036\uffe3\037\uffe3\040" +
    "\uffe3\001\002\000\022\006\uffd4\015\uffd4\022\063\023\056" +
    "\024\066\025\061\036\uffd4\037\uffd4\001\002\000\044\006" +
    "\uffe4\010\uffe4\015\uffe4\017\uffe4\020\uffe4\022\uffe4\023\uffe4" +
    "\024\066\025\061\027\uffe4\030\uffe4\031\uffe4\032\uffe4\035" +
    "\uffe4\036\uffe4\037\uffe4\040\uffe4\001\002\000\022\006\uffd3" +
    "\015\uffd3\022\063\023\056\024\066\025\061\036\uffd3\037" +
    "\uffd3\001\002\000\012\006\uffce\015\uffce\036\uffce\037\uffce" +
    "\001\002\000\040\005\020\006\ufff0\023\004\041\015\042" +
    "\027\043\005\044\010\045\011\046\024\047\023\050\006" +
    "\051\021\052\032\053\030\054\007\001\002\000\014\006" +
    "\ufff2\022\063\023\056\024\066\025\061\001\002\000\040" +
    "\005\045\023\004\033\044\041\015\042\027\043\005\044" +
    "\010\045\011\046\024\047\023\050\006\051\021\052\032" +
    "\053\030\054\007\001\002\000\010\015\107\036\050\037" +
    "\052\001\002\000\040\005\020\006\ufff1\023\004\041\015" +
    "\042\027\043\005\044\010\045\011\046\024\047\023\050" +
    "\006\051\021\052\032\053\030\054\007\001\002\000\014" +
    "\006\ufff3\022\063\023\056\024\066\025\061\001\002\000" +
    "\044\006\uffe7\010\uffe7\015\uffe7\017\uffe7\020\uffe7\022\uffe7" +
    "\023\uffe7\024\uffe7\025\uffe7\027\uffe7\030\uffe7\031\uffe7\032" +
    "\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\001\002\000\056" +
    "\002\uffff\004\uffff\005\uffff\012\uffff\013\uffff\014\uffff\016" +
    "\uffff\023\uffff\034\uffff\035\uffff\041\uffff\042\uffff\043\uffff" +
    "\044\uffff\045\uffff\046\uffff\047\uffff\050\uffff\051\uffff\052" +
    "\uffff\053\uffff\054\uffff\001\002\000\040\005\020\023\004" +
    "\034\115\041\015\042\027\043\005\044\010\045\011\046" +
    "\024\047\023\050\006\051\021\052\032\053\030\054\007" +
    "\001\002\000\014\006\125\022\063\023\056\024\066\025" +
    "\061\001\002\000\036\005\020\023\004\041\015\042\027" +
    "\043\005\044\010\045\011\046\024\047\023\050\006\051" +
    "\021\052\032\053\030\054\007\001\002\000\016\022\063" +
    "\023\056\024\066\025\061\035\uffb9\040\123\001\002\000" +
    "\004\035\120\001\002\000\004\006\121\001\002\000\004" +
    "\015\122\001\002\000\060\002\ufffc\004\ufffc\005\ufffc\011" +
    "\ufffc\012\ufffc\013\ufffc\014\ufffc\016\ufffc\023\ufffc\034\ufffc" +
    "\035\ufffc\041\ufffc\042\ufffc\043\ufffc\044\ufffc\045\ufffc\046" +
    "\ufffc\047\ufffc\050\ufffc\051\ufffc\052\ufffc\053\ufffc\054\ufffc" +
    "\001\002\000\036\005\020\023\004\041\015\042\027\043" +
    "\005\044\010\045\011\046\024\047\023\050\006\051\021" +
    "\052\032\053\030\054\007\001\002\000\004\035\uffba\001" +
    "\002\000\004\015\126\001\002\000\060\002\ufffd\004\ufffd" +
    "\005\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd\016\ufffd\023" +
    "\ufffd\034\ufffd\035\ufffd\041\ufffd\042\ufffd\043\ufffd\044\ufffd" +
    "\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053" +
    "\ufffd\054\ufffd\001\002\000\044\006\uffea\010\uffea\015\uffea" +
    "\017\uffea\020\uffea\022\uffea\023\uffea\024\uffea\025\uffea\027" +
    "\uffea\030\uffea\031\uffea\032\uffea\035\uffea\036\uffea\037\uffea" +
    "\040\uffea\001\002\000\050\006\uffc1\007\132\010\uffc1\015" +
    "\uffc1\017\uffc1\020\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1" +
    "\026\133\027\uffc1\030\uffc1\031\uffc1\032\uffc1\035\uffc1\036" +
    "\uffc1\037\uffc1\040\131\001\002\000\004\050\130\001\002" +
    "\000\004\051\137\001\002\000\036\005\020\023\004\041" +
    "\015\042\027\043\005\044\010\045\011\046\024\047\023" +
    "\050\006\051\021\052\032\053\030\054\007\001\002\000" +
    "\044\006\uffbf\010\uffbf\015\uffbf\017\uffbf\020\uffbf\022\063" +
    "\023\056\024\066\025\061\027\uffbf\030\uffbf\031\uffbf\032" +
    "\uffbf\035\uffbf\036\uffbf\037\uffbf\040\135\001\002\000\004" +
    "\050\130\001\002\000\044\006\uffbe\010\uffbe\015\uffbe\017" +
    "\uffbe\020\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\027\uffbe" +
    "\030\uffbe\031\uffbe\032\uffbe\035\uffbe\036\uffbe\037\uffbe\040" +
    "\uffbe\001\002\000\004\010\140\001\002\000\044\006\uffbd" +
    "\010\uffbd\015\uffbd\017\uffbd\020\uffbd\022\uffbd\023\uffbd\024" +
    "\uffbd\025\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\035\uffbd" +
    "\036\uffbd\037\uffbd\040\uffbd\001\002\000\044\006\uffc0\010" +
    "\uffc0\015\uffc0\017\uffc0\020\uffc0\022\uffc0\023\uffc0\024\uffc0" +
    "\025\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\035\uffc0\036" +
    "\uffc0\037\uffc0\040\uffc0\001\002\000\044\006\uffe9\010\uffe9" +
    "\015\uffe9\017\uffe9\020\uffe9\022\uffe9\023\uffe9\024\uffe9\025" +
    "\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\035\uffe9\036\uffe9" +
    "\037\uffe9\040\uffe9\001\002\000\004\026\144\001\002\000" +
    "\036\005\020\023\004\041\015\042\027\043\005\044\010" +
    "\045\011\046\024\047\023\050\006\051\021\052\032\053" +
    "\030\054\007\001\002\000\044\006\uffb8\010\uffb8\015\uffb8" +
    "\017\uffb8\020\uffb8\022\063\023\056\024\066\025\061\027" +
    "\uffb8\030\uffb8\031\uffb8\032\uffb8\035\uffb8\036\uffb8\037\uffb8" +
    "\040\146\001\002\000\004\050\143\001\002\000\044\006" +
    "\uffb7\010\uffb7\015\uffb7\017\uffb7\020\uffb7\022\uffb7\023\uffb7" +
    "\024\uffb7\025\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\035" +
    "\uffb7\036\uffb7\037\uffb7\040\uffb7\001\002\000\004\012\151" +
    "\001\002\000\004\005\152\001\002\000\040\005\045\023" +
    "\004\033\044\041\015\042\027\043\005\044\010\045\011" +
    "\046\024\047\023\050\006\051\021\052\032\053\030\054" +
    "\007\001\002\000\010\006\154\036\050\037\052\001\002" +
    "\000\004\015\155\001\002\000\060\002\ufff8\004\ufff8\005" +
    "\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8\016\ufff8\023\ufff8" +
    "\034\ufff8\035\ufff8\041\ufff8\042\ufff8\043\ufff8\044\ufff8\045" +
    "\ufff8\046\ufff8\047\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8" +
    "\054\ufff8\001\002\000\014\006\057\022\063\023\056\024" +
    "\066\025\061\001\002\000\040\005\045\023\004\033\044" +
    "\041\015\042\027\043\005\044\010\045\011\046\024\047" +
    "\023\050\006\051\021\052\032\053\030\054\007\001\002" +
    "\000\010\006\161\036\050\037\052\001\002\000\052\004" +
    "\017\005\020\012\012\013\022\014\031\016\025\023\004" +
    "\034\013\041\015\042\027\043\005\044\010\045\011\046" +
    "\024\047\023\050\006\051\021\052\032\053\030\054\007" +
    "\001\002\000\060\002\ufff9\004\ufff9\005\ufff9\011\ufff9\012" +
    "\ufff9\013\ufff9\014\ufff9\016\ufff9\023\ufff9\034\ufff9\035\ufff9" +
    "\041\ufff9\042\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9\047" +
    "\ufff9\050\ufff9\051\ufff9\052\ufff9\053\ufff9\054\ufff9\001\002" +
    "\000\060\002\ufff4\004\ufff4\005\ufff4\011\164\012\ufff4\013" +
    "\ufff4\014\ufff4\016\ufff4\023\ufff4\034\ufff4\035\ufff4\041\ufff4" +
    "\042\ufff4\043\ufff4\044\ufff4\045\ufff4\046\ufff4\047\ufff4\050" +
    "\ufff4\051\ufff4\052\ufff4\053\ufff4\054\ufff4\001\002\000\052" +
    "\004\017\005\020\012\012\013\022\014\031\016\025\023" +
    "\004\034\013\041\015\042\027\043\005\044\010\045\011" +
    "\046\024\047\023\050\006\051\021\052\032\053\030\054" +
    "\007\001\002\000\060\002\ufff5\004\ufff5\005\ufff5\011\ufff5" +
    "\012\ufff5\013\ufff5\014\ufff5\016\ufff5\023\ufff5\034\ufff5\035" +
    "\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5\045\ufff5\046\ufff5" +
    "\047\ufff5\050\ufff5\051\ufff5\052\ufff5\053\ufff5\054\ufff5\001" +
    "\002\000\060\002\ufffb\004\ufffb\005\ufffb\011\ufffb\012\ufffb" +
    "\013\ufffb\014\ufffb\016\ufffb\023\ufffb\034\ufffb\035\ufffb\041" +
    "\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb" +
    "\050\ufffb\051\ufffb\052\ufffb\053\ufffb\054\ufffb\001\002\000" +
    "\044\006\uffe8\010\uffe8\015\uffe8\017\uffe8\020\uffe8\022\uffe8" +
    "\023\uffe8\024\uffe8\025\uffe8\027\uffe8\030\uffe8\031\uffe8\032" +
    "\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\001\002\000\004" +
    "\002\000\001\002\000\054\004\017\005\020\012\012\013" +
    "\022\014\031\016\025\023\004\034\013\035\172\041\015" +
    "\042\027\043\005\044\010\045\011\046\024\047\023\050" +
    "\006\051\021\052\032\053\030\054\007\001\002\000\060" +
    "\002\ufffa\004\ufffa\005\ufffa\011\ufffa\012\ufffa\013\ufffa\014" +
    "\ufffa\016\ufffa\023\ufffa\034\ufffa\035\ufffa\041\ufffa\042\ufffa" +
    "\043\ufffa\044\ufffa\045\ufffa\046\ufffa\047\ufffa\050\ufffa\051" +
    "\ufffa\052\ufffa\053\ufffa\054\ufffa\001\002\000\040\005\045" +
    "\023\004\033\044\041\015\042\027\043\005\044\010\045" +
    "\011\046\024\047\023\050\006\051\021\052\032\053\030" +
    "\054\007\001\002\000\010\006\175\036\050\037\052\001" +
    "\002\000\052\004\017\005\020\012\012\013\022\014\031" +
    "\016\025\023\004\034\013\041\015\042\027\043\005\044" +
    "\010\045\011\046\024\047\023\050\006\051\021\052\032" +
    "\053\030\054\007\001\002\000\060\002\ufff7\004\ufff7\005" +
    "\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\016\ufff7\023\ufff7" +
    "\034\ufff7\035\ufff7\041\ufff7\042\ufff7\043\ufff7\044\ufff7\045" +
    "\ufff7\046\ufff7\047\ufff7\050\ufff7\051\ufff7\052\ufff7\053\ufff7" +
    "\054\ufff7\001\002\000\050\006\uffc7\007\202\010\uffc7\015" +
    "\uffc7\017\uffc7\020\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7" +
    "\026\203\027\uffc7\030\uffc7\031\uffc7\032\uffc7\035\uffc7\036" +
    "\uffc7\037\uffc7\040\201\001\002\000\044\006\uffeb\010\uffeb" +
    "\015\uffeb\017\uffeb\020\uffeb\022\uffeb\023\uffeb\024\uffeb\025" +
    "\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\035\uffeb\036\uffeb" +
    "\037\uffeb\040\uffeb\001\002\000\004\050\177\001\002\000" +
    "\004\051\207\001\002\000\036\005\020\023\004\041\015" +
    "\042\027\043\005\044\010\045\011\046\024\047\023\050" +
    "\006\051\021\052\032\053\030\054\007\001\002\000\044" +
    "\006\uffc5\010\uffc5\015\uffc5\017\uffc5\020\uffc5\022\063\023" +
    "\056\024\066\025\061\027\uffc5\030\uffc5\031\uffc5\032\uffc5" +
    "\035\uffc5\036\uffc5\037\uffc5\040\205\001\002\000\004\050" +
    "\177\001\002\000\044\006\uffc4\010\uffc4\015\uffc4\017\uffc4" +
    "\020\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\027\uffc4\030" +
    "\uffc4\031\uffc4\032\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4" +
    "\001\002\000\004\010\210\001\002\000\046\006\uffc3\010" +
    "\uffc3\015\uffc3\017\uffc3\020\uffc3\022\uffc3\023\uffc3\024\uffc3" +
    "\025\uffc3\026\211\027\uffc3\030\uffc3\031\uffc3\032\uffc3\035" +
    "\uffc3\036\uffc3\037\uffc3\040\uffc3\001\002\000\004\034\212" +
    "\001\002\000\036\005\020\023\004\041\015\042\027\043" +
    "\005\044\010\045\011\046\024\047\023\050\006\051\021" +
    "\052\032\053\030\054\007\001\002\000\016\022\063\023" +
    "\056\024\066\025\061\035\uffbb\040\216\001\002\000\004" +
    "\035\215\001\002\000\044\006\uffc2\010\uffc2\015\uffc2\017" +
    "\uffc2\020\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\027\uffc2" +
    "\030\uffc2\031\uffc2\032\uffc2\035\uffc2\036\uffc2\037\uffc2\040" +
    "\uffc2\001\002\000\036\005\020\023\004\041\015\042\027" +
    "\043\005\044\010\045\011\046\024\047\023\050\006\051" +
    "\021\052\032\053\030\054\007\001\002\000\004\035\uffbc" +
    "\001\002\000\044\006\uffc6\010\uffc6\015\uffc6\017\uffc6\020" +
    "\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\027\uffc6\030\uffc6" +
    "\031\uffc6\032\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\001" +
    "\002\000\044\006\uffec\010\uffec\015\uffec\017\uffec\020\uffec" +
    "\022\uffec\023\uffec\024\uffec\025\uffec\027\uffec\030\uffec\031" +
    "\uffec\032\uffec\035\uffec\036\uffec\037\uffec\040\uffec\001\002" +
    "\000\050\006\uffcc\007\224\010\uffcc\015\uffcc\017\uffcc\020" +
    "\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\225\027\uffcc" +
    "\030\uffcc\031\uffcc\032\uffcc\035\uffcc\036\uffcc\037\uffcc\040" +
    "\223\001\002\000\004\050\222\001\002\000\004\051\231" +
    "\001\002\000\036\005\020\023\004\041\015\042\027\043" +
    "\005\044\010\045\011\046\024\047\023\050\006\051\021" +
    "\052\032\053\030\054\007\001\002\000\044\006\uffca\010" +
    "\uffca\015\uffca\017\uffca\020\uffca\022\063\023\056\024\066" +
    "\025\061\027\uffca\030\uffca\031\uffca\032\uffca\035\uffca\036" +
    "\uffca\037\uffca\040\227\001\002\000\004\050\222\001\002" +
    "\000\044\006\uffc9\010\uffc9\015\uffc9\017\uffc9\020\uffc9\022" +
    "\uffc9\023\uffc9\024\uffc9\025\uffc9\027\uffc9\030\uffc9\031\uffc9" +
    "\032\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\001\002\000" +
    "\004\010\232\001\002\000\044\006\uffc8\010\uffc8\015\uffc8" +
    "\017\uffc8\020\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\027" +
    "\uffc8\030\uffc8\031\uffc8\032\uffc8\035\uffc8\036\uffc8\037\uffc8" +
    "\040\uffc8\001\002\000\044\006\uffcb\010\uffcb\015\uffcb\017" +
    "\uffcb\020\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\027\uffcb" +
    "\030\uffcb\031\uffcb\032\uffcb\035\uffcb\036\uffcb\037\uffcb\040" +
    "\uffcb\001\002\000\044\006\uffd8\010\uffd8\015\uffd8\017\uffd8" +
    "\020\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\027\uffd8\030" +
    "\uffd8\031\uffd8\032\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8" +
    "\001\002\000\036\005\020\023\004\041\015\042\027\043" +
    "\005\044\010\045\011\046\024\047\023\050\006\051\243" +
    "\052\032\053\030\054\007\001\002\000\040\005\020\023" +
    "\004\034\240\041\015\042\027\043\005\044\010\045\011" +
    "\046\024\047\023\050\006\051\021\052\032\053\030\054" +
    "\007\001\002\000\044\006\uffe0\010\uffe0\015\uffe0\017\uffe0" +
    "\020\uffe0\022\063\023\056\024\066\025\061\027\uffe0\030" +
    "\uffe0\031\uffe0\032\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0" +
    "\001\002\000\036\005\020\023\004\041\015\042\027\043" +
    "\005\044\010\045\011\046\024\047\023\050\006\051\021" +
    "\052\032\053\030\054\007\001\002\000\004\035\242\001" +
    "\002\000\044\006\uffdb\010\uffdb\015\uffdb\017\uffdb\020\uffdb" +
    "\022\uffdb\023\uffdb\024\uffdb\025\uffdb\027\uffdb\030\uffdb\031" +
    "\uffdb\032\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\001\002" +
    "\000\014\010\250\022\uffef\023\uffef\024\uffef\025\uffef\001" +
    "\002\000\014\010\245\022\063\023\056\024\066\025\061" +
    "\001\002\000\046\006\uffde\010\uffde\015\uffde\017\uffde\020" +
    "\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026\246\027\uffde" +
    "\030\uffde\031\uffde\032\uffde\035\uffde\036\uffde\037\uffde\040" +
    "\uffde\001\002\000\036\005\020\023\004\041\015\042\027" +
    "\043\005\044\010\045\011\046\024\047\023\050\006\051" +
    "\021\052\032\053\030\054\007\001\002\000\044\006\uffdc" +
    "\010\uffdc\015\uffdc\017\uffdc\020\uffdc\022\063\023\056\024" +
    "\066\025\061\027\uffdc\030\uffdc\031\uffdc\032\uffdc\035\uffdc" +
    "\036\uffdc\037\uffdc\040\uffdc\001\002\000\046\006\uffdf\010" +
    "\uffdf\015\uffdf\017\uffdf\020\uffdf\022\uffdf\023\uffdf\024\uffdf" +
    "\025\uffdf\026\251\027\uffdf\030\uffdf\031\uffdf\032\uffdf\035" +
    "\uffdf\036\uffdf\037\uffdf\040\uffdf\001\002\000\036\005\020" +
    "\023\004\041\015\042\027\043\005\044\010\045\011\046" +
    "\024\047\023\050\006\051\021\052\032\053\030\054\007" +
    "\001\002\000\044\006\uffdd\010\uffdd\015\uffdd\017\uffdd\020" +
    "\uffdd\022\063\023\056\024\066\025\061\027\uffdd\030\uffdd" +
    "\031\uffdd\032\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\001" +
    "\002\000\044\006\uffe6\010\uffe6\015\uffe6\017\uffe6\020\uffe6" +
    "\022\uffe6\023\uffe6\024\uffe6\025\uffe6\027\uffe6\030\uffe6\031" +
    "\uffe6\032\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\001\002" +
    "\000\044\006\uffe1\010\uffe1\015\uffe1\017\uffe1\020\uffe1\022" +
    "\uffe1\023\uffe1\024\uffe1\025\uffe1\027\uffe1\030\uffe1\031\uffe1" +
    "\032\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\252\000\012\002\013\003\025\004\032\005\015\001" +
    "\001\000\004\005\253\001\001\000\004\005\252\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\220\001" +
    "\001\000\004\012\177\001\001\000\002\001\001\000\010" +
    "\003\170\004\032\005\015\001\001\000\002\001\001\000" +
    "\004\005\166\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\155\001\001\000\002\001\001\000\006\004" +
    "\147\005\015\001\001\000\004\016\141\001\001\000\004" +
    "\013\126\001\001\000\002\001\001\000\006\004\111\005" +
    "\015\001\001\000\004\005\110\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\034\010\036\001\001\000\002\001\001\000\006" +
    "\005\041\006\042\001\001\000\002\001\001\000\006\004" +
    "\040\005\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\041\006\101\001\001\000" +
    "\006\005\045\006\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\041\006\053\001\001\000\002\001" +
    "\001\000\006\005\041\006\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\100\001\001\000\004\005" +
    "\077\001\001\000\002\001\001\000\004\005\076\001\001" +
    "\000\004\005\075\001\001\000\004\005\074\001\001\000" +
    "\004\005\073\001\001\000\004\005\072\001\001\000\004" +
    "\005\071\001\001\000\004\005\070\001\001\000\004\005" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\103\001" +
    "\001\000\002\001\001\000\006\005\041\006\105\001\001" +
    "\000\002\001\001\000\004\005\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\113" +
    "\001\001\000\002\001\001\000\006\005\115\015\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\115\015" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\140\001\001\000\002\001\001\000\004\005\133\001\001" +
    "\000\002\001\001\000\004\013\135\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\144\001" +
    "\001\000\002\001\001\000\004\016\146\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\041\006\152\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\041\006" +
    "\157\001\001\000\002\001\001\000\010\004\162\005\015" +
    "\007\161\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\164\005\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\111\005\015\001\001\000\002\001\001\000\006\005\041" +
    "\006\173\001\001\000\002\001\001\000\006\004\175\005" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\217\001\001\000\002\001\001\000" +
    "\004\005\203\001\001\000\002\001\001\000\004\012\205" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\212\014\213\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\212\014\216\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\232\001\001\000\002\001\001\000\004\005\225\001\001" +
    "\000\002\001\001\000\004\011\227\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\243\001\001\000\004\005" +
    "\236\001\001\000\002\001\001\000\006\005\212\014\240" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\246" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\251\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s){
        System.err.println("Error token " + s);
    }

    public void unrecovered_syntax_error(Symbol s){
        System.err.println("Error token " + s);
        done_parsing();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // ini ::= listaSent 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 AST a = new AST("ini", e, null); a.gc(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // listaSent ::= listaSent sent 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("sent", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // listaSent ::= sent 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("sent", e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sent ::= PRINT AP exp CP PYC 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new AST("print", e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sent ::= PRINT AP ALL pArrayIni CLL CP PYC 
            {
              AST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AST a = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new AST("printArray", a ,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sent ::= exp PYC 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sent ::= ALL listaSent CLL 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sent ::= IF AP cond CP elseSent 
            {
              AST RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("if", c, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sent ::= DO sent WHILE AP cond CP PYC 
            {
              AST RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		AST s = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new AST("doWhile",c,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sent ::= WHILE AP cond CP sent 
            {
              AST RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST s = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("while",c,s);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sent ::= FOR AP expFor CP sent 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST s = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("for", e, s);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // elseSent ::= sent ELSE sent 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("else", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseSent",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // elseSent ::= sent 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("else", e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseSent",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expFor ::= exp PYC cond PYC exp 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("expFor", c, new AST("aux", e1, e2)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expFor",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expFor ::= PYC cond PYC exp 
            {
              AST RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("expFor", c, new AST("aux", null, e2)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expFor",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expFor ::= exp PYC cond PYC 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AST("expFor", c, new AST("aux", e1, null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expFor",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expFor ::= PYC cond PYC 
            {
              AST RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AST("expFor", c, new AST("aux", null, null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expFor",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // exp ::= NUM 
            {
              AST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("num", new AST(n, null, null), null ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // exp ::= REAL 
            {
              AST RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("real", new AST(r, null, null), null ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // exp ::= ASCII 
            {
              AST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("ascii", new AST(a, null, null), null ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // exp ::= INT listaEnteros 
            {
              AST RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST l = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("int", l, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // exp ::= CHAR listaChar 
            {
              AST RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST l = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("char", l, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // exp ::= FLOAT listaReales 
            {
              AST RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST l = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("float", l, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // exp ::= STRING expString 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("string", e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp ::= CASTCHAR exp 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("castChar", e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp ::= CASTINT exp 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("castInt", e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= CASTFLOAT exp 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("castFloat", e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= exp MAS exp 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("mas", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= exp MENOS exp 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("menos", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp ::= exp POR exp 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("por", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp ::= exp DIV exp 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("div", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp ::= MENOS exp 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("menosUnario", e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp ::= IDENT ASIG exp 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("asig", new AST(i, null, null), e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp ::= IDENT AC NUM CC 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AST("arrayPos", new AST(i, null, null), new AST(n, null, null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp ::= IDENT AC exp CC 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AST("arrayPos", new AST(i, null, null), e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp ::= IDENT AC NUM CC ASIG exp 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("arrayAsig", new AST(i, new AST(n, null, null), null), e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp ::= IDENT AC exp CC ASIG exp 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("arrayAsig", new AST(i, e1, null), e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp ::= IDENT ASIG ALL arrayIni CLL 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST a = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AST("iniArray", new AST(i, null, null), a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp ::= IDENT 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("ident", new AST(i, null, null), null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= AP exp CP 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= IDENT LENGTH 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AST("length", new AST(i, null, null), null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= CADENA 
            {
              AST RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("cadena", null, new AST(c, null, null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // cond ::= exp IGUAL exp 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("igual", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // cond ::= exp DIF exp 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("distinto", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // cond ::= exp MENOR exp 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("menor", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // cond ::= exp MENORIGUAL exp 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("menorIgual", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // cond ::= exp MAYOR exp 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("mayor", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // cond ::= exp MAYORIGUAL exp 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("mayorIgual", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // cond ::= cond AND cond 
            {
              AST RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST c1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST c2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("and", c1, c2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // cond ::= cond OR cond 
            {
              AST RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST c1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST c2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("or", c1, c2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // cond ::= NOT cond 
            {
              AST RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("not", c, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // cond ::= AP cond CP 
            {
              AST RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // listaEnteros ::= IDENT 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("intIdent", null, new AST(i, null, null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaEnteros",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // listaEnteros ::= IDENT COMA listaEnteros 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST l = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("intIdent", l, new AST(i, null, null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaEnteros",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // listaEnteros ::= IDENT ASIG exp 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("asigInt", null, new AST(i,e,null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaEnteros",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // listaEnteros ::= IDENT ASIG exp COMA listaEnteros 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST l = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("asigInt", l, new AST(i,e,null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaEnteros",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // listaEnteros ::= IDENT AC NUM CC 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AST("arrayInt", new AST(i, null, null), new AST(n,null,null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaEnteros",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // listaChar ::= IDENT 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("charIdent", null, new AST(i, null, null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaChar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // listaChar ::= IDENT COMA listaChar 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST l = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("charIdent", l, new AST(i, null, null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaChar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // listaChar ::= IDENT ASIG exp 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("asigChar", null, new AST(i,e,null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaChar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // listaChar ::= IDENT ASIG exp COMA listaChar 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST l = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("asigChar", l, new AST(i,e,null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaChar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // listaChar ::= IDENT AC NUM CC 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AST("arrayChar", new AST(i, null, null), new AST(n,null,null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaChar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // listaChar ::= IDENT AC NUM CC ASIG ALL arrayIni CLL 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST a = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AST("iniAsigArrayCh",new AST("iniArray", new AST(i, null, null),a), 
																			new AST("arrayChar", new AST(i, null, null), new AST(n,null,null))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaChar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // listaReales ::= IDENT 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("floatIdent", null, new AST(i, null, null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaReales",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // listaReales ::= IDENT COMA listaReales 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST l = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("floatIdent", l, new AST(i, null, null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaReales",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // listaReales ::= IDENT ASIG exp 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("asigFloat", null, new AST(i,e,null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaReales",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // listaReales ::= IDENT ASIG exp COMA listaReales 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST l = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("asigFloat", l, new AST(i,e,null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaReales",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // listaReales ::= IDENT AC NUM CC 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AST("arrayFloat", new AST(i, null, null), new AST(n,null,null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaReales",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // arrayIni ::= exp COMA arrayIni 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST a = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("arrayIni", e, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayIni",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // arrayIni ::= exp 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("arrayIni", e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayIni",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // pArrayIni ::= exp COMA pArrayIni 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST a = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("pArrayIni", e, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pArrayIni",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // pArrayIni ::= exp 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("pArrayIni", e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pArrayIni",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expString ::= IDENT ASIG exp 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("asigString", new AST(i ,e ,null), null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expString",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expString ::= IDENT ASIG exp COMA expString 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("asigString", new AST(i ,e ,null),  e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expString",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
